{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/sqlite/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,YAAY,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;;;;;IA+CvH,sBAAmB,eAAoB;QAApB,oBAAe,GAAf,eAAe,CAAK;KAAK;IAS5C,qCAAc,aAAC,WAA4C,KAAW;IAEtE;;;OAGG;;;;;IAKH,kCAAW;;;;cAAC,EAAO,IAAkB,MAAM,CAAC,EAAE;IAE9C;;;OAGG;;;;;IAEH,sCAAe;;;;cAAC,EAAmC,IAAkB,MAAM,CAAC,EAAE;IAK9E,2CAAoB,kBAAY;IAEhC;;OAEG;;;;IAEH,2BAAI;;;kBAAmB,MAAM,CAAC,EAAE;IAEhC;;OAEG;;;;IAEH,4BAAK;;;kBAAmB,MAAM,CAAC,EAAE;IAEjC;;;OAGG;;;;;IAEH,iCAAU;;;;cAAC,SAAiB,EAAE,MAAW,IAAkB,MAAM,CAAC,EAAE;IAEpE;;;OAGG;;;;;IAEH,+BAAQ;;;;cAAC,aAA6C,IAAkB,MAAM,CAAC,EAAE;IAKjF,kDAA2B,kBAAY;;QA5DtC,gBAAgB;;;;QAEhB,gBAAgB;;;;QAEhB,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;sDACoE;;QAMrE,eAAe,CAAC;YACf,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;mDAC4C;;QAM7C,eAAe,EAAE;;;;uDAC4D;;QAE7E,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;4DAC8B;;QAK/B,eAAe,EAAE;;;;4CACc;;QAK/B,eAAe,EAAE;;;;6CACe;;QAMhC,eAAe,EAAE;;;;kDACkD;;QAMnE,eAAe,EAAE;;yCACM,KAAK;;gDAAoD;;QAEhF,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;mEACqC;uBA9GzC;;SA8Ca,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkHG,0BAAiB;;;;IAE3C;;;;;;;OAOG;;;;;;;;;IAEH,uBAAM;;;;;;;;cAAC,MAA4B;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,YAAY,CAAC,YAAY,CAAC,MAAM,EAAE,UAAC,EAAO,IAAK,OAAA,OAAO,CAAC,IAAI,YAAY,CAAC,EAAE,CAAC,CAAC,EAA7B,CAA6B,EAAE,MAAM,CAAC,CAAC;SACvF,CAAC,CAAC;KACJ;IAED;;;OAGG;;;;;IAEH,yBAAQ;;;;kBAAmB,MAAM,CAAC,EAAE;IAEpC;;;;OAIG;;;;;;IAEH,+BAAc;;;;;cAAC,MAA4B,IAAkB,MAAM,CAAC,EAAE;;gBA/BvE,UAAU;;;;;QAWR,YAAY,EAAE;;;;wCAKd;;QAMA,OAAO,EAAE;;;;0CAC0B;;QAOnC,OAAO,EAAE;;;;gDAC4D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA9B3D,MAAM;QARlB,MAAM,CAAC;YACN,UAAU,EAAE,QAAQ;YACpB,SAAS,EAAE,cAAc;YACzB,MAAM,EAAE,wBAAwB;YAChC,IAAI,EAAE,uDAAuD;YAC7D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC;SAClD,CAAC;OAEW,MAAM,EAgClB;iBAhMD;EAgK4B,iBAAiB;SAAhC,MAAM","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, CordovaInstance, Plugin, CordovaCheck, InstanceProperty, IonicNativePlugin } from '@ionic-native/core';\r\n\r\ndeclare const sqlitePlugin: any;\r\n\r\nexport interface SQLiteDatabaseConfig {\r\n  /**\r\n   * Name of the database. Example: 'my.db'\r\n   */\r\n  name: string;\r\n  /**\r\n   * Location of the database. Example: 'default'\r\n   */\r\n  location?: string;\r\n  /**\r\n   * iOS Database Location. Example: 'Library'\r\n   */\r\n  iosDatabaseLocation?: string;\r\n  /**\r\n  * support opening pre-filled databases with https://github.com/litehelpers/cordova-sqlite-ext\r\n  */\r\n  createFromLocation?: number;\r\n  /**\r\n   * support encrypted databases with https://github.com/litehelpers/Cordova-sqlcipher-adapter\r\n   */\r\n  key?: string;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport interface SQLiteTransaction {\r\n  start: () => void;\r\n  executeSql: (sql: any, values: any, success: Function, error: Function) => void;\r\n  addStatement: (sql: any, values: any, success: Function, error: Function) => void;\r\n  handleStatementSuccess: (handler: Function, response: any) => void;\r\n  handleStatementFailure: (handler: Function, response: any) => void;\r\n  run: () => void;\r\n  abort: (txFailure: any) => void;\r\n  finish: () => void;\r\n  abortFromQ: (sqlerror: any) => void;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class SQLiteObject {\r\n\r\n  constructor(public _objectInstance: any) { }\r\n\r\n  @InstanceProperty databaseFeatures: { isSQLitePluginDatabase: boolean };\r\n\r\n  @InstanceProperty openDBs: any;\r\n\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  addTransaction(transaction: (tx: SQLiteTransaction) => void): void { }\r\n\r\n  /**\r\n   * @param fn {any}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance({\r\n    successIndex: 2,\r\n    errorIndex: 1\r\n  })\r\n  transaction(fn: any): Promise<any> { return; }\r\n\r\n  /**\r\n   * @param fn {Function}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  readTransaction(fn: (tx: SQLiteTransaction) => void): Promise<any> { return; }\r\n\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  startNextTransaction(): void { }\r\n\r\n  /**\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  open(): Promise<any> { return; }\r\n\r\n  /**\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  close(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Execute SQL on the opened database. Note, you must call `create` first, and\r\n   * ensure it resolved and successfully opened the database.\r\n   */\r\n  @CordovaInstance()\r\n  executeSql(statement: string, params: any): Promise<any> { return; }\r\n\r\n  /**\r\n   * @param sqlStatements {Array<string | string[] | any>}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  sqlBatch(sqlStatements: Array<string | string[] | any>): Promise<any> { return; }\r\n\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  abortallPendingTransactions(): void { }\r\n\r\n}\r\n\r\n/**\r\n * @name SQLite\r\n *\r\n * @description\r\n * Access SQLite databases on the device.\r\n *\r\n * @usage\r\n *\r\n * ```typescript\r\n * import { SQLite, SQLiteObject } from '@ionic-native/sqlite';\r\n *\r\n * constructor(private sqlite: SQLite) { }\r\n *\r\n * ...\r\n *\r\n * this.sqlite.create({\r\n *   name: 'data.db',\r\n *   location: 'default'\r\n * })\r\n *   .then((db: SQLiteObject) => {\r\n *\r\n *\r\n *     db.executeSql('create table danceMoves(name VARCHAR(32))', {})\r\n *       .then(() => console.log('Executed SQL'))\r\n *       .catch(e => console.log(e));\r\n *\r\n *\r\n *   })\r\n *   .catch(e => console.log(e));\r\n *\r\n * ```\r\n *\r\n * @classes\r\n * SQLiteObject\r\n * @interfaces\r\n * SQLiteDatabaseConfig\r\n * SQLiteTransaction\r\n */\r\n@Plugin({\r\n  pluginName: 'SQLite',\r\n  pluginRef: 'sqlitePlugin',\r\n  plugin: 'cordova-sqlite-storage',\r\n  repo: 'https://github.com/litehelpers/Cordova-sqlite-storage',\r\n  platforms: ['Android', 'iOS', 'macOS', 'Windows']\r\n})\r\n@Injectable()\r\nexport class SQLite extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Open or create a SQLite database file.\r\n   *\r\n   * See the plugin docs for an explanation of all options: https://github.com/litehelpers/Cordova-sqlite-storage#opening-a-database\r\n   *\r\n   * @param config {SQLiteDatabaseConfig} database configuration\r\n   * @return Promise<SQLiteObject>\r\n   */\r\n  @CordovaCheck()\r\n  create(config: SQLiteDatabaseConfig): Promise<SQLiteObject> {\r\n    return new Promise((resolve, reject) => {\r\n      sqlitePlugin.openDatabase(config, (db: any) => resolve(new SQLiteObject(db)), reject);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Verify that both the Javascript and native part of this plugin are installed in your application\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  echoTest(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Deletes a database\r\n   * @param config {SQLiteDatabaseConfig} database configuration\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  deleteDatabase(config: SQLiteDatabaseConfig): Promise<any> { return; }\r\n\r\n}\r\n"]}